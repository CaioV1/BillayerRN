import RNFS from 'react-native-fs'
import React, { useContext } from "react";
import DocumentPicker from 'react-native-document-picker'
import { Alert, ScrollView, Share } from "react-native";
import { NativeStackNavigationProp } from "@react-navigation/native-stack"

import { styles } from "./styles";
import ImageButton from "../imageButton";
import { getNextMonthDate } from "../../utils/date.util";
import { listMenu } from "../../resources/static/menuBalance";

import { RealmContext } from "../../configs/RealmContext";
import { importData } from '../../services/transaction.service';
import { AppConfigContext } from "../../context/appConfig.context";

import Transaction from "../../models/schemas/TransactionSchema";
import RootStackParamList from "../../models/interfaces/RootScreensParams"

interface MainMenuProps {
  navigation: NativeStackNavigationProp<RootStackParamList, 'Balance' | 'BalanceHistory' | 'Transactions' | 'DetailCategory'>;
  setLoading: (loading: boolean) => void;
}

const { useRealm, useQuery } = RealmContext;

const MainMenu: React.FC<MainMenuProps> = ({ navigation, setLoading }) => {
  const realm = useRealm();
  const listTransactions = useQuery(Transaction);
  const { appConfig, createNewBalances, clearDatabase, createConfigIfDoesntExist } = useContext(AppConfigContext);

  const onRenewButtonPress = () => {
    if(getNextMonthDate() === appConfig.dateToRenewBalance){
      Alert.alert('Balance already renewed today. Try again tomorrow.');
      return;
    }
    Alert.alert('Confirm renewal?', 'This function will reset the balances of expenses.', [
      {text: 'Yes', onPress: () => createNewBalances()},
      {text: 'No', onPress: () => {}},
    ]);
  }

  const onExportBalancePress = async () => {
    if(listTransactions.length === 0){
      Alert.alert('There is no data to export');
      return;
    }
    await Share.share({ message: JSON.stringify(listTransactions.toJSON()) })
  }

  const onImportBalancePress = async () => {
    setLoading(true);
    
    try {
      const fileInfo = await DocumentPicker.pickSingle({ type: ['text/plain', 'public.text'] });
      const textFile = await RNFS.readFile(fileInfo.uri);
      const listTransactions = JSON.parse(textFile); 

      if(listTransactions.length === 0) {
        Alert.alert('There is no data to import');
        return;
      }

      if(!Array.isArray(listTransactions) || !listTransactions[0].balance){
        Alert.alert('File not compatible', 'Please use the file generated by the "Export Balances" feature.');
        return;
      }
  
      clearDatabase();
      createConfigIfDoesntExist();

      importData(realm, listTransactions); 
      Alert.alert('Data imported with success!');
    } catch (error) {
      Alert.alert('An error has occurred while importing balances.');
      console.log(error);
    } finally {
      setLoading(false);
    }
  }

  return (
    <ScrollView showsHorizontalScrollIndicator={false} horizontal={true} style={styles.flatListMenu}>
      <ImageButton buttonTitle='List Transaction' imageBase64={listMenu[0].data} onPress={() => navigation.navigate('Transactions')} />
      <ImageButton buttonTitle='Balance History' imageBase64={listMenu[3].data} onPress={() => navigation.navigate('BalanceHistory')} />
      <ImageButton buttonTitle='Add Transaction' imageBase64={listMenu[2].data} onPress={() => navigation.navigate('CreateTransaction', {})} />
      <ImageButton buttonTitle='Add Category' imageBase64={listMenu[1].data} onPress={() => navigation.navigate('CreateCategory', {})} />
      <ImageButton buttonTitle='Renew Balance' imageBase64={listMenu[4].data} onPress={onRenewButtonPress} />
      <ImageButton buttonTitle='Export Balances' imageBase64={listMenu[7].data} onPress={onExportBalancePress} />
      <ImageButton buttonTitle='Import Balances' imageBase64={listMenu[8].data} lastItem onPress={onImportBalancePress} />
    </ScrollView>
  )
}

export default MainMenu;